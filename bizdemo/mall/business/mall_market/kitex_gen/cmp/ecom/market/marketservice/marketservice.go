// Code generated by Kitex v1.9.2. DO NOT EDIT.

package marketservice

import (
	"code.byted.org/kite/kitex/client"
	kitex "code.byted.org/kite/kitex/pkg/serviceinfo"
	"context"
	"github.com/cloudwego/kitex-examples/bizdemo/mall/business/mall_market/kitex_gen/cmp/ecom/market"
)

func serviceInfo() *kitex.ServiceInfo {
	return marketServiceServiceInfo
}

var marketServiceServiceInfo = newServiceInfo()

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "MarketService"
	handlerType := (*market.MarketService)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddCoupon":     kitex.NewMethodInfo(addCouponHandler, newMarketServiceAddCouponArgs, newMarketServiceAddCouponResult, false),
		"GetCouponById": kitex.NewMethodInfo(getCouponByIdHandler, newMarketServiceGetCouponByIdArgs, newMarketServiceGetCouponByIdResult, false),
		"UpdateCoupon":  kitex.NewMethodInfo(updateCouponHandler, newMarketServiceUpdateCouponArgs, newMarketServiceUpdateCouponResult, false),
		"DeleteCoupon":  kitex.NewMethodInfo(deleteCouponHandler, newMarketServiceDeleteCouponArgs, newMarketServiceDeleteCouponResult, false),
		"UsingCoupon":   kitex.NewMethodInfo(usingCouponHandler, newMarketServiceUsingCouponArgs, newMarketServiceUsingCouponResult, false),
		"RetCoupon":     kitex.NewMethodInfo(retCouponHandler, newMarketServiceRetCouponArgs, newMarketServiceRetCouponResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "market",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v1.9.2",
		Extra:           extra,
	}
	return svcInfo
}

func addCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceAddCouponArgs)
	realResult := result.(*market.MarketServiceAddCouponResult)
	success, err := handler.(market.MarketService).AddCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceAddCouponArgs() interface{} {
	return market.NewMarketServiceAddCouponArgs()
}

func newMarketServiceAddCouponResult() interface{} {
	return market.NewMarketServiceAddCouponResult()
}

func getCouponByIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceGetCouponByIdArgs)
	realResult := result.(*market.MarketServiceGetCouponByIdResult)
	success, err := handler.(market.MarketService).GetCouponById(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceGetCouponByIdArgs() interface{} {
	return market.NewMarketServiceGetCouponByIdArgs()
}

func newMarketServiceGetCouponByIdResult() interface{} {
	return market.NewMarketServiceGetCouponByIdResult()
}

func updateCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceUpdateCouponArgs)
	realResult := result.(*market.MarketServiceUpdateCouponResult)
	success, err := handler.(market.MarketService).UpdateCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceUpdateCouponArgs() interface{} {
	return market.NewMarketServiceUpdateCouponArgs()
}

func newMarketServiceUpdateCouponResult() interface{} {
	return market.NewMarketServiceUpdateCouponResult()
}

func deleteCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceDeleteCouponArgs)
	realResult := result.(*market.MarketServiceDeleteCouponResult)
	success, err := handler.(market.MarketService).DeleteCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceDeleteCouponArgs() interface{} {
	return market.NewMarketServiceDeleteCouponArgs()
}

func newMarketServiceDeleteCouponResult() interface{} {
	return market.NewMarketServiceDeleteCouponResult()
}

func usingCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceUsingCouponArgs)
	realResult := result.(*market.MarketServiceUsingCouponResult)
	success, err := handler.(market.MarketService).UsingCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceUsingCouponArgs() interface{} {
	return market.NewMarketServiceUsingCouponArgs()
}

func newMarketServiceUsingCouponResult() interface{} {
	return market.NewMarketServiceUsingCouponResult()
}

func retCouponHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*market.MarketServiceRetCouponArgs)
	realResult := result.(*market.MarketServiceRetCouponResult)
	success, err := handler.(market.MarketService).RetCoupon(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newMarketServiceRetCouponArgs() interface{} {
	return market.NewMarketServiceRetCouponArgs()
}

func newMarketServiceRetCouponResult() interface{} {
	return market.NewMarketServiceRetCouponResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddCoupon(ctx context.Context, req *market.AddCouponReq) (r *market.AddCouponResp, err error) {
	var _args market.MarketServiceAddCouponArgs
	_args.Req = req
	var _result market.MarketServiceAddCouponResult
	if err = p.c.Call(ctx, "AddCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCouponById(ctx context.Context, req *market.GetCouponByIdReq) (r *market.GetCouponByIdResp, err error) {
	var _args market.MarketServiceGetCouponByIdArgs
	_args.Req = req
	var _result market.MarketServiceGetCouponByIdResult
	if err = p.c.Call(ctx, "GetCouponById", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateCoupon(ctx context.Context, req *market.UpdateCouponReq) (r *market.UpdateCouponResp, err error) {
	var _args market.MarketServiceUpdateCouponArgs
	_args.Req = req
	var _result market.MarketServiceUpdateCouponResult
	if err = p.c.Call(ctx, "UpdateCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteCoupon(ctx context.Context, req *market.DeleteCouponReq) (r *market.DeleteCouponResp, err error) {
	var _args market.MarketServiceDeleteCouponArgs
	_args.Req = req
	var _result market.MarketServiceDeleteCouponResult
	if err = p.c.Call(ctx, "DeleteCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UsingCoupon(ctx context.Context, req *market.UsingCouponReq) (r *market.UsingCouponResp, err error) {
	var _args market.MarketServiceUsingCouponArgs
	_args.Req = req
	var _result market.MarketServiceUsingCouponResult
	if err = p.c.Call(ctx, "UsingCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RetCoupon(ctx context.Context, req *market.RetCouponReq) (r *market.RetCouponResp, err error) {
	var _args market.MarketServiceRetCouponArgs
	_args.Req = req
	var _result market.MarketServiceRetCouponResult
	if err = p.c.Call(ctx, "RetCoupon", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
